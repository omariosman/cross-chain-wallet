import { EncryptionType } from "../../cryptography";
import { Hex } from "../../utils";
import { IHDKeyManager, Versions } from "./core";
import { IHDKey } from "./hdkey/core";
/**
 * Base HDKey manager, to initialize the root key from the master seed.
 */
export declare abstract class HDKeyManagerBase implements IHDKeyManager {
    private _encryptionType;
    /**
     * The constructor function takes a single parameter, which is the encryption type
     * @param {EncryptionType} encryptionType - EncryptionType
     */
    constructor(encryptionType: EncryptionType);
    /**
     * Get the underlying encryption type
     */
    get encryptionType(): EncryptionType;
    verifySeed(seed: Uint8Array): void;
    /**
     * Create a new HDKey object from a seed
     * @param {Hex} seed - The seed to use to generate the master key.
     * @param {Versions} [versions] - The version of the HDKey.
     * @returns The HDKey object.
     */
    fromMasterSeed(seed: Hex, versions?: Versions): IHDKey;
    /**
     * Construct a new HD key with valid information
     * @param privateKey
     * @param chainCode
     * @param versions
     */
    protected createNewHDKey(privateKey: Uint8Array, chainCode: Uint8Array, versions: Versions): IHDKey;
    /**
     * Returns the asymetric key wrapper
     */
    protected getKeyFactory(): import("../../cryptography").IAsymmetricKey;
    /**
     * Returns the master key for the seed
     */
    protected abstract GetMasterSecret(): Uint8Array;
    /**
     * Simply construct a new HDKey from give inputs without any validation.
     */
    protected abstract createNewHDKey_Unsafe(privateKey: Uint8Array, chainCode: Uint8Array, versions: Versions): IHDKey;
}
