import { IHDKey } from "./core";
import { HDKeyConfig } from "../core";
/**
 * A component for BIP32
 * Original source code from https://github.com/cryptocoinjs/hdkey.
 * Refer and take inspiration to implement a generic HDKey
 */
export declare abstract class HDKey implements IHDKey {
    protected config: HDKeyConfig;
    protected privateKey: Uint8Array;
    protected chainCode: Uint8Array;
    protected publicKey: Uint8Array;
    protected path: string;
    protected depth: number;
    protected index: number;
    protected parentFingerprint: number;
    /**
     * Construct a new HD key
     * @param config drive the encryption mode and address generator
     * @param privateKey the private key
     * @param chainCode the chain code
     * @param publicKey optional public key to derive children
     */
    constructor(config: HDKeyConfig, privateKey: Uint8Array, chainCode: Uint8Array, publicKey: Uint8Array);
    /**
     * Returns the current path
     * @returns
     */
    getPath(): string;
    /**
     * Returns the private key Uint8Array
     * @returns
     */
    getPrivateKey(): Uint8Array;
    /**
     * Returns the chain code Uint8Array
     * @returns
     */
    getChainCode(): Uint8Array;
    /**
     * It creates a public key from the private key.
     * @returns
     */
    getPublicKey(): Promise<Uint8Array>;
    /**
     * Returns the private extended key (hex string)
     * @returns
     */
    getPrivateExtendedKey(): Promise<string>;
    /**
     * Returns the public extended key (hex string)
     * @returns
     */
    getPublicExtendedKey(): Promise<string>;
    /**
     * Returns the fingerprint
     */
    getFingerprint(): Promise<number>;
    /**
     * Returns the parent fingerprint
     */
    getParentFingerPrint(): number;
    /**
     * Derive a HD key from the given path
     * @param path
     * @returns
     */
    derive(path: string): Promise<IHDKey>;
    protected createChildHDKey(index: number, privateKey: Uint8Array, chainCode: Uint8Array, publicKey: Uint8Array): Promise<HDKey>;
    protected abstract deriveChild(index: number): Promise<HDKey>;
    protected abstract createNewHDKey(privateKey: Uint8Array, chainCode: Uint8Array, publicKey: Uint8Array): HDKey;
    protected getHardenedOffset(): number;
    /**
     * Index should be hardened
     * @param index
     * @param hardened
     * @returns
     */
    protected getHardenedIndex(index: number, hardened: boolean): number;
    /**
     * Combine all relevance information of current node into a single array
     * @param version of private key or public key
     * @param key either private key of public key
     * @returns
     */
    private serialize;
    /**
     * Get the asymetric key wrapper to serialize data
     * @returns
     */
    protected getKeyFactory(): import("../../../cryptography").IAsymmetricKey;
}
