"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HDKeyED25519 = void 0;
const cryptography_1 = require("../../../cryptography");
const utils_1 = require("../../../utils");
const hd_key_1 = require("./hd-key");
class HDKeyED25519 extends hd_key_1.HDKey {
    /**
     * It creates a new HDKeyED25519 object.
     * @param {Uint8Array} privateKey - The private key.
     * @param {Uint8Array} chainCode - The chain code is a 32-byte sequence that is used to derive child keys.
     * @param {Uint8Array} publicKey - The public key of the new HDKey.
     * @returns An HDKeyED25519 object.
     */
    createNewHDKey(privateKey, chainCode, publicKey) {
        return new HDKeyED25519(this.config, privateKey, chainCode, publicKey);
    }
    /**
     * Create a new HDKey from the current HDKey and the provided index
     * @param {number} index - The index of the child key to derive.
     * @returns An HDKey object.
     */
    deriveChild(index) {
        const privateKey = this.getPrivateKey();
        if (!privateKey) {
            throw new Error("Cannot derive a hardened child without private key");
        }
        const isHardened = index >= this.getHardenedOffset();
        if (!isHardened) {
            throw new Error("Hardened index is required to derive a hardened child");
        }
        // data = 0x00 || ser256(kpar) || ser32(index)
        const data = utils_1.TypeUtils.concatBytes(utils_1.TypeUtils.getBytesOfZero(), privateKey, utils_1.TypeUtils.convertU32ToBytes(index));
        const { key, chainCode } = cryptography_1.CryptoUtils.digestSHA512(data, this.getChainCode());
        return this.createChildHDKey(index, key, chainCode, null);
    }
    /**
     * It creates a public key from the private key.
     * @returns The public key.
     */
    getPublicKey() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.publicKey) {
                const publicKey = yield this.getKeyFactory().createPublicKey(this.privateKey, true);
                this.publicKey = utils_1.TypeUtils.concatBytes(utils_1.TypeUtils.getBytesOfZero(), publicKey);
            }
            return Promise.resolve(this.publicKey);
        });
    }
    /**
     * Following SLIP 0010 - ed only supports harden paths
     * @param index
     * @returns
     */
    getHardenedIndex(index) {
        index += this.getHardenedOffset();
        return index;
    }
}
exports.HDKeyED25519 = HDKeyED25519;
