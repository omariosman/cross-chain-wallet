"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LegacyWallet = void 0;
const utils_1 = require("../../utils");
const base_wallet_1 = require("../core/base-wallet");
/**
 * Provide detail implementation for a legacy wallet which works with a single private key
 */
class LegacyWallet extends base_wallet_1.BaseWallet {
    getReferenceKey() {
        return this.getPrivateKey();
    }
    getPrivateKeyByteArray() {
        return utils_1.TypeUtils.parseHexToArray(this.getKey());
    }
    getRawPublicKeyByteArray() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._publicKey) {
                this._publicKey = yield this.getAsymmetricKey().createPublicKey(this.getPrivateKey(), true);
            }
            return this._publicKey;
        });
    }
}
exports.LegacyWallet = LegacyWallet;
