import { EncryptionType } from "../../cryptography";
import { IWallet } from "../core";
export declare abstract class BaseWallet<TKey> implements IWallet<TKey> {
    /**
     * The key instance
     */
    private key;
    /**
     * The encryption type
     */
    private encryptionType;
    constructor(key: TKey, encryptionType: EncryptionType);
    /**
     * Returns the private key as byte-array
     */
    abstract getPrivateKeyByteArray(): Uint8Array;
    /**
     * Returns the raw public key as byte-array
     */
    abstract getRawPublicKeyByteArray(): Promise<Uint8Array>;
    /**
     * Returns the formated public key as byte-array
     */
    getPublicKeyByteArray(): Promise<Uint8Array>;
    /**
     * Returns the public address as byte-array
     */
    getPublicAddressByteArray(): Promise<Uint8Array>;
    /**
     * Returns the key of wallet
     * @returns
     */
    getKey(): TKey;
    /**
     * Returns the refrence key of wallet
     * either a private key for legacy wallet or derived path of sub-wallet of HD wallet
     */
    abstract getReferenceKey(): string;
    /**
     * Returns the encryption type of wallet
     * @returns
     */
    getEncryptionType(): EncryptionType;
    /**
     * Returns the private key of wallet
     */
    getPrivateKey(): string;
    /**
     * Returns the raw public key of wallet
     */
    getRawPublicKey(): Promise<string>;
    /**
     * Returns the formated public address of wallet
     */
    getPublicKey(): Promise<string>;
    /**
     * Returns the public hash of wallet
     */
    getPublicAddress(): Promise<string>;
    getPrivateKeyInPEM(): string;
    protected getAsymmetricKey(): import("../../cryptography").IAsymmetricKey;
}
