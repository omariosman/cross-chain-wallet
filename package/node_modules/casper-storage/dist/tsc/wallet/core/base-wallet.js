"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseWallet = void 0;
const cryptography_1 = require("../../cryptography");
const utils_1 = require("../../utils");
class BaseWallet {
    constructor(key, encryptionType) {
        this.key = key;
        this.encryptionType = encryptionType;
    }
    /**
     * Returns the formated public key as byte-array
     */
    getPublicKeyByteArray() {
        return __awaiter(this, void 0, void 0, function* () {
            const key = yield this.getPublicKey();
            return utils_1.TypeUtils.convertHexStringToArray(key);
        });
    }
    /**
     * Returns the public address as byte-array
     */
    getPublicAddressByteArray() {
        return __awaiter(this, void 0, void 0, function* () {
            const key = yield this.getPublicAddress();
            return utils_1.TypeUtils.convertHexStringToArray(key);
        });
    }
    /**
     * Returns the key of wallet
     * @returns
     */
    getKey() {
        return this.key;
    }
    /**
     * Returns the encryption type of wallet
     * @returns
     */
    getEncryptionType() {
        return this.encryptionType;
    }
    /**
     * Returns the private key of wallet
     */
    getPrivateKey() {
        return utils_1.TypeUtils.convertArrayToHexString(this.getPrivateKeyByteArray());
    }
    /**
     * Returns the raw public key of wallet
     */
    getRawPublicKey() {
        return __awaiter(this, void 0, void 0, function* () {
            const publicKey = yield this.getRawPublicKeyByteArray();
            return utils_1.TypeUtils.convertArrayToHexString(publicKey);
        });
    }
    /**
     * Returns the formated public address of wallet
     */
    getPublicKey() {
        return __awaiter(this, void 0, void 0, function* () {
            const publicKey = yield this.getRawPublicKey();
            return utils_1.TypeUtils.convertArrayToHexString(cryptography_1.CryptoUtils.hash160(utils_1.TypeUtils.convertHexStringToArray(publicKey)));
        });
    }
    /**
     * Returns the public hash of wallet
     */
    getPublicAddress() {
        return __awaiter(this, void 0, void 0, function* () {
            const addr = yield this.getRawPublicKeyByteArray();
            const separator = new Uint8Array([0]);
            const data = new Uint8Array([...cryptography_1.EncoderUtils.encodeText(this.getEncryptionType()), ...separator, ...addr]);
            return utils_1.TypeUtils.convertArrayToHexString(cryptography_1.CryptoUtils.blake2bHash(data));
        });
    }
    getPrivateKeyInPEM() {
        return this.getAsymmetricKey().getKeyInPEM(this.getPrivateKeyByteArray(), true);
    }
    getAsymmetricKey() {
        return cryptography_1.AsymmetricKeyFactory.getInstance(this.getEncryptionType());
    }
}
exports.BaseWallet = BaseWallet;
