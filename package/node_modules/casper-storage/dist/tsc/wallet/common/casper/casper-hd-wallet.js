"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CasperHDWallet = exports.CasperWallet = void 0;
const cryptography_1 = require("../../../cryptography");
const core_1 = require("../../../wallet/core");
const wallet_1 = require("../../../wallet");
const casper_wallet_utils_1 = require("./casper-wallet-utils");
/**
 * Casper wallet implementation
 */
class CasperWallet extends wallet_1.Wallet {
    /**
     * Get the public address of current wallet
     */
    getPublicKey() {
        return __awaiter(this, void 0, void 0, function* () {
            let pubKey = yield this.getRawPublicKey();
            if (this.getEncryptionType() === cryptography_1.EncryptionType.Ed25519) {
                // ! Casper doesn't use 00 prefix as standard SLIP-0010
                pubKey = pubKey.slice(2);
            }
            return casper_wallet_utils_1.CasperWalletUtils.getPublicAddress(this.getEncryptionType(), pubKey);
        });
    }
}
exports.CasperWallet = CasperWallet;
/**
 * Casper HD wallet implementation, purpose 44 and using coin-type Casper (506)
 */
class CasperHDWallet extends wallet_1.HDWallet {
    constructor(masterSeed, encryptionType = cryptography_1.EncryptionType.Ed25519) {
        super(CasperWallet, CasperHDWallet.PATH, encryptionType, masterSeed);
    }
}
CasperHDWallet.PATH = new core_1.CoinPath(core_1.Purpose.BIP44, core_1.CoinType.Casper);
exports.CasperHDWallet = CasperHDWallet;
