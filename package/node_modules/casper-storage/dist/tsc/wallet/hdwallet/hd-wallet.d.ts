import { IHDKey } from "../../bips/bip32/hdkey/core";
import { EncryptionType } from "../../cryptography";
import { Hex } from "../../utils";
import { IHDWallet, IWallet, IWalletConstructor, CoinPath } from "../../wallet/core";
/**
 * Hierarchical Deterministic Wallets (BIP32)
 * Standard for deterministic wallets that can be interchanged between different clients.
 */
export declare abstract class HDWallet<TWallet extends IWallet<IHDKey>> implements IHDWallet<TWallet> {
    protected walletConstructor: IWalletConstructor<TWallet>;
    protected masterSeed: Uint8Array;
    protected encryptionType: EncryptionType;
    protected coinPath: CoinPath;
    private _masterKey;
    constructor(walletConstructor: IWalletConstructor<TWallet>, coinPath: CoinPath, encryptionType: EncryptionType, masterSeed: Hex);
    getEncryptionType(): EncryptionType;
    getCoinPath(): CoinPath;
    getMasterKey(): IHDKey;
    getMasterWallet(): Promise<TWallet>;
    getAccount(index: number, internal?: boolean): Promise<TWallet>;
    getWallet(accountIndex: number, internal: boolean, walletIndex: number): Promise<TWallet>;
    getWalletFromPath(path: string): Promise<TWallet>;
    /**
     * Get the HD key manager
     * @returns
     */
    private getHDKeyManager;
}
