import { Hex } from "../../utils";
/**
 * Provide utilities to due with cryptography
 */
export declare class CryptoUtils {
    /**
     * It uses the HMAC function to generate a key and chain code.
     * @param {Uint8Array} data - The data to be hashed.
     * @param {Uint8Array} key - The private key.
     * @returns an object with two properties: `key` and `chainCode`.
     */
    static digestSHA512(data: Hex, key: Hex): {
        key: Uint8Array;
        chainCode: Uint8Array;
    };
    /**
     * It hashes the data using the SHA-256 algorithm.
     * @param {Uint8Array} data - The data to be hashed.
     * @returns The hash256 function returns a hash256 value.
     */
    static hash256(data: Hex): Uint8Array;
    /**
     * Given a byte array, return the hash160 of the sha256 of the byte array
     * @param {Uint8Array} data - The data to be hashed.
     * @returns The hash160 of the input data.
     */
    static hash160(data: Hex): Uint8Array;
    /**
     * It hashes the password using the PBKDF2 algorithm.
     * @param {Uint8Array} password - The password to use for the key derivation.
     * @param {Uint8Array} salt - A salt to use for the key derivation function (salt's length must be from 16).
     * @param {number} iterations - The number of iterations to perform (must be from 120k).
     * @param {number} keySize - The size of the derived key in bytes (must be from 16).
     * @returns The PBKDF2 function returns a Uint8Array.
     */
    static pbkdf2Sync(password: Uint8Array, salt: Uint8Array, iterations: number, keySize: number): Uint8Array;
    /**
     * Generate a random array of bytes of the given length
     * @param {number} len - the length of the random bytes to generate.
     * @returns A random Uint8Array of length `len`.
     */
    static randomBytes(len: number): Uint8Array;
    /**
     * It hashes the input using the blake2b algorithm.
     * @param {Uint8Array} x - The input to the hash function.
     * @param [length=32] - The length of the output hash in bytes.
     * @returns The hash of the input.
     */
    static blake2bHash(x: Uint8Array, length?: number): Uint8Array;
    /**
     * Create a strong private key from any input, where the key is longer and more secure.
     * @param input
     * @param salt
     * @returns
     */
    static scrypt(input: string, salt: Uint8Array): Uint8Array;
    /**
     * Returns the crypto instance which is resolved based on the envrionment
     * @returns
     */
    static getCrypto(): Crypto;
    private static ensurePbkdf2Input;
}
