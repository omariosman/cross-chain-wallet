"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EncoderUtils = void 0;
const base_1 = require("@scure/base");
const sha256_1 = require("@noble/hashes/sha256");
const base_2 = require("@scure/base");
const utils_1 = require("../../utils");
const base58c = (0, base_2.base58check)(sha256_1.sha256);
/**
 * Provide utiltiies to encode/decode values
 */
class EncoderUtils {
    /**
     * Read the PEM content and decode it as base64 data
     * @param content
     * @returns
     */
    static readBase64PEM(content) {
        if (!content) {
            throw new Error("PEM content is required");
        }
        const base64Content = content
            // There are two kinds of line-endings, CRLF(\r\n) and LF(\n)
            .split(/\r?\n/)
            // Takes actual content
            .filter(x => !x.startsWith('---'))
            .join('')
            // Remove the line-endings in the end of content
            .trim();
        return base_1.base64.decode(base64Content);
    }
    /**
     * It encodes the data into a base58 string.
     * @param {Uint8Array} data - The data to be encoded.
     * @returns The base58 encoded string.
     */
    static encodeBase58(data) {
        if (!data || !data.length) {
            throw new Error("Input data is required to encode base58");
        }
        return base58c.encode(data);
    }
    /**
     * Encode a text to byte-array
     * @param input
     * @returns
     */
    static encodeText(input) {
        if (!utils_1.TypeUtils.isString(input)) {
            throw new TypeError(`Expected string, got ${typeof input}`);
        }
        return new TextEncoder().encode(input);
    }
    /**
     * Decode a byte-array to text
    */
    static decodeText(input) {
        return new TextDecoder().decode(input);
    }
}
exports.EncoderUtils = EncoderUtils;
