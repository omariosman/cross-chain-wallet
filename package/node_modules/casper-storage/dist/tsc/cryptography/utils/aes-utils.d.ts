import { Hex } from "../../utils";
/**
 * Represents the result of encryption with additional data
 */
export declare class EncryptionResult {
    value: string;
    salt: Uint8Array;
    iv: Uint8Array;
    /**
     * Parse the encrypted value back the result
     * @param encryptedValue
     * @returns
     */
    static parseFrom(encryptedValue: string): EncryptionResult;
    constructor(value: string, salt: Uint8Array, iv: Uint8Array);
    /**
     * Serialize encryption result to a string
     * @returns
     */
    toString(): string;
}
/**
 * AES enryption utils
 * Provide functions to encrypt a text with a secure  password
 * and also be able to decrypt the encrypted value back to the original text with that secure password
 */
export declare class AESUtils {
    /**
     * Encrypts a value
     *
     * @param {string} password - The password to encrypt value.
     * @param {string} value - The value to encrypt.
     * @param {string} mode - The AES mode to encrypt value (default is AES-GCM).
     * @returns The encrypted value with a random generated salt
     */
    static encrypt(password: string, value: string, mode?: string): Promise<EncryptionResult>;
    /**
     * Decrypts a value
     *
     * @param {string} password - The password to decrypt value.
     * @param {string} value - The value to decrypt.
     * @param {string} iv - The additional data for encryption.
     * @param {string} mode - The AES mode to decrypt value (default is AES-GCM).
     * @returns The decrypted value.
     */
    static decrypt(password: string, value: Hex, salt: Hex, iv: Hex, mode?: string): Promise<string>;
    private static importKey;
}
