"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AsymmetricKeyFactory = void 0;
__exportStar(require("./interfaces"), exports);
__exportStar(require("./parser"), exports);
const core_1 = require("../core");
const secp256k1_1 = require("./secp256k1");
const ed25519_1 = require("./ed25519");
/**
 * Factory provides implementation of a specific algorithm likes Ed25519 or Secp256k1,
 * which provides needed common methods to work with wallets
 */
class AsymmetricKeyFactory {
    /**
     * Returns the asynmmetric key to work with a specific encryption mode
     * @param type
     * @returns
     */
    static getInstance(type) {
        switch (type) {
            case core_1.EncryptionType.Ed25519: return ed25519_1.Ed25519;
            case core_1.EncryptionType.Secp256k1: return secp256k1_1.Secp256k1;
            default: throw new Error(`The encryption type ${type} is not supported`);
        }
    }
}
exports.AsymmetricKeyFactory = AsymmetricKeyFactory;
