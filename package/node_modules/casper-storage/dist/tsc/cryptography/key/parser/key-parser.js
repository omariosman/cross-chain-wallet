"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyParser = void 0;
const cryptography_1 = require("../../../cryptography");
const auto_key_parser_1 = require("./auto-key-parser");
const ed25519_key_parser_1 = require("./ed25519-key-parser");
const secp256k1_key_parser_1 = require("./secp256k1-key-parser");
const autoKeyParser = new auto_key_parser_1.AutoKeyParser();
const edParser = new ed25519_key_parser_1.Ed25519KeyParser();
const secParser = new secp256k1_key_parser_1.Secp256k1KeyParser();
/**
 * Key-parser provides a parser to parse the keys from a specific format (currently which is exported from casper-sign) to standard hex data
 */
class KeyParser {
    /**
     * Get an instance of key-parser based on an encryption type
     * @param encryptionType optional, if we don't specific an encryption type it will try to guess the right one to parse
     * @returns
     */
    static getInstance(encryptionType) {
        // No specific encryption mode, uses the auto one
        if (!encryptionType) {
            return autoKeyParser;
        }
        // Otherwise, returns the specific parser
        switch (encryptionType) {
            case cryptography_1.EncryptionType.Ed25519: return edParser;
            case cryptography_1.EncryptionType.Secp256k1: return secParser;
            default:
                throw new Error(`Unsupported encryption type ${encryptionType}`);
        }
    }
}
exports.KeyParser = KeyParser;
