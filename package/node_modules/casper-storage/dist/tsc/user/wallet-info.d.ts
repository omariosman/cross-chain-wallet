import { EncryptionType } from "../cryptography";
/**
 * Descriptor of a wallet
 * e.g name, icon, etc
 */
export declare class WalletDescriptor {
    private _name?;
    private _icon?;
    private _description?;
    /**
     * Create a new instance of the `WalletDescriptor` class
     * @param {string} [_name] - The name of wallet.
     * @param {string} [_icon] - The icon of wallet.
     * @param {string} [_description] - The description of wallet.
     */
    constructor(_name?: string, _icon?: string, _description?: string);
    /**
     * Get the name of wallet
     * @returns The name of wallet.
     */
    get name(): string;
    /**
     * It sets the name of wallet.
     * @param {string} name - The name of wallet.
     */
    set name(name: string);
    /**
     * Get the icon of wallet
     * @returns The icon of wallet.
     */
    get icon(): string;
    /**
     * It sets the icon of wallet.
     * @param {string} icon - The icon of wallet.
     */
    set icon(icon: string);
    /**
     * Get the description of wallet
     * @returns The description of wallet.
     */
    get description(): string;
    /**
     * It sets the description of wallet.
     * @param {string} description - The description of wallet.
     */
    set description(description: string);
    /**
     * It creates a WalletDescriptor object from a string or object.
     * @param {string | WalletDescriptor} info - string | WalletDescriptor
     * @returns A WalletDescriptor object.
     */
    static from(info: string | WalletDescriptor): WalletDescriptor;
    /**
     * Override the JSOn stringify behavior to have properly properties
     */
    toJSON(): {
        name: string;
        icon: string;
        description: string;
    };
}
/**
 * Wallet information
 * - Wallet id (private key or derived path)
 * - Encryption type
 * - Descriptor (name, icon, etc)
 */
export declare class WalletInfo {
    private _id;
    private _encryptionType;
    private _descriptor;
    private _uid;
    /**
     * Create a new wallet information with key and encryption type
     * @param id
     * @param type
     * @param info
     */
    constructor(id: string, type: EncryptionType, info?: WalletDescriptor);
    /**
     * Get id of wallet (private key or derived path)
     */
    get id(): string;
    /**
     * Get uid (hashed of id) of wallet
     */
    get uid(): string;
    /**
     * Get the encryption type of wallet
     */
    get encryptionType(): EncryptionType;
    /**
     * Get descriptor of wallet
     */
    get descriptor(): WalletDescriptor;
    /**
     * Set descriptor of wallet
     */
    set descriptor(info: WalletDescriptor);
    /**
     * Get the account index (only applicable for wallets from HD wallet)
     */
    get index(): number;
    /**
     * Returns true if this is a legacy wallet
     */
    get isLegacy(): boolean;
    /**
     * Returns true if this is a HD wallet
     */
    get isHDWallet(): boolean;
    /**
     * Override the JSOn stringify behavior to have properly properties
     */
    toJSON(): {
        id: string;
        uid: string;
        encryptionType: EncryptionType;
        descriptor: WalletDescriptor;
    };
}
/**
 * HD wallet information
 * With the master key and specific encryption type
 */
export declare class HDWalletInfo {
    private _encryptedKeyPhrase;
    private _keySeed;
    private _encryptionType;
    private _derivedWallets;
    /**
     * Create a new HD wallet information with master key and encryption type
     * @param key
     * @param encryptionType
     */
    constructor(key: string, encryptionType: EncryptionType);
    /**
     * Get encrypted key-phrase
     */
    get encryptedKeyPhrase(): string;
    /**
     * Set encrypted key-phrase
     */
    set encryptedKeyPhrase(value: string);
    /**
     * Get encryption type of wallet
     */
    get encryptionType(): EncryptionType;
    /**
     * Get derived wallets
     */
    get derivedWallets(): WalletInfo[];
    /**
     * Get the key-seed (from the keyphrase)
     */
    get keySeed(): string;
    /**
     * Set a derived wallet information
     * @param derivedPath
     * @param encryptionType
     * @param info
     */
    setDerivedWallet(derivedPath: string, encryptionType: EncryptionType, info?: string | WalletDescriptor): void;
    /**
     * Remove a derived wallet by path
     * @param derivedPath
     */
    removeDerivedWallet(derivedPath: string): void;
    /**
     * Override the JSOn stringify behavior to have properly properties
     */
    toJSON(): {
        encryptedKeyPhrase: string;
        keySeed: string;
        encryptionType: EncryptionType;
        derives: WalletInfo[];
    };
}
