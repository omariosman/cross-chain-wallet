import { IHDKey } from "../bips/bip32";
import { IWallet } from "../wallet";
import { EncryptionType } from "../cryptography";
import { IUser, IUserOptions } from "./core";
import { HDWalletInfo, WalletDescriptor, WalletInfo } from "./wallet-info";
import { Hex } from "../utils";
/**
 * A user instance to manage HD wallet and legacy wallets with detailed information.
 * A user serialized value is secured by a secured password which is given by user.
 * We should never store user's password but its encrypted one to do extra actions.
 */
export declare class User implements IUser {
    /**
     * Deserialize user information to an instance of user
     * @param password
     * @param userEncryptedInfo
     * @param options Options to work with user's instance
     * @returns
     */
    static deserializeFrom(password: string, userEncryptedInfo: string, options?: Partial<IUserOptions>): Promise<User>;
    /**
     * Secret password (encrypted from user's password).
     * To serialize/deserialize the wallet information
     */
    private _pwdOptions;
    private _passwordValidator;
    private _hdWalletInfo;
    private _legacyWallets;
    private _underlyingHDWallet;
    /**
     * Initialize a new user instnace
     * @param password a secure password to encrypt/decrypt user's data
     * @param options Options to work with user's instance
     */
    constructor(password: string, options?: Partial<IUserOptions>);
    /**
     * Update password to serialize user's information.
     * A new salt will be generated regardless the given options.
     * @param password
     */
    updatePassword(password: string): Promise<void>;
    setHDWallet(keyPhrase: string, encryptionType: EncryptionType): Promise<void>;
    getHDWallet(): HDWalletInfo;
    getHDWalletKeyPhrase(): Promise<string>;
    getWalletAccount(index: number): Promise<IWallet<IHDKey>>;
    getWalletAccountByRefKey(idOrPath: string): Promise<IWallet<IHDKey>>;
    addWalletAccount(index: number, info?: WalletDescriptor): Promise<IWallet<IHDKey>>;
    removeWalletAccount(index: number): Promise<void>;
    addLegacyWallet(wallet: IWallet<Hex>, info?: WalletDescriptor): void;
    getLegacyWallets(): WalletInfo[];
    hasLegacyWallets(): boolean;
    hasHDWallet(): boolean;
    setWalletInfo(id: string, info: string | WalletDescriptor): void;
    getWalletInfo(id: string): WalletInfo;
    removeWalletInfo(id: string): void;
    /**
     * Serializes the wallet and encrypts it with the password.
     * @returns The encrypted wallet.
     */
    serialize(): Promise<string>;
    /**
     * Deserializes the serialized and encrypted user information to merge back the current user instance.
     * @param {string} value - serialized user information
     */
    deserialize(value: string): Promise<void>;
    encrypt(value: string): Promise<string>;
    decrypt(value: string): Promise<string>;
    private getWallet;
    private setHDWalletAccount;
    /**
    * Check if the given id belongs to a HD wallet.
    * The id of a HD wallet should be a path
    * @param id
    * @returns
    */
    private isHDWalletPath;
    /**
     * Confirms the given password matches requirements
     * @param password
     */
    private validatePassword;
}
