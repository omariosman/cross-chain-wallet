/**
 * Definition of hex data, either a hex string or an array of hex value
 */
export type Hex = string | Uint8Array;
/**
 * Provide utiltiies to work with types
 * - Convert hex value between types string and array of uint8
 * - Check types
 */
export declare class TypeUtils {
    /**
     * A byte-array of Zero
     */
    static getBytesOfZero(): Uint8Array;
    /**
     * Convert the given array value to a hex string
     * @param input hex array
     * @returns
     */
    static convertArrayToHexString(input: Uint8Array | ArrayBuffer): string;
    /**
     * Convert an array of bytes to a string of binary digits
     * @param {Uint8Array} input - The input array of bytes.
     * @param [bitsPerValue=8] - The number of bits to use per value.
     * @returns The binary string representation of the input array.
     */
    static convertArrayToBinaryString(input: Uint8Array, bitsPerValue?: number): string;
    /**
     * Convert the given hex string to an Uint8Array
     * @param input hex string
     * @returns
     */
    static convertHexStringToArray(input: string): Uint8Array;
    /**
     * It takes a hex value and converts it to a Uint8Array.
     * @param {Hex} input - The input to be converted to a Uint8Array.
     * @returns a `Uint8Array` object
     */
    static parseHexToArray(input: Hex): Uint8Array;
    /**
     * It takes a hex value and converts it to a hex string.
     * @param {Hex} input - The input to be converted to a string.
     * @returns The hex string representation of the input.
     */
    static parseHexToString(input: Hex): string;
    /**
     * It checks if the input is a string or a string instance.
     * @param {any} input - any
     * @returns `true` or `false`
     */
    static isString(input: any): boolean;
    /**
     * Convert bytes to a bigint number
     * @param bytes
     * @returns
     */
    static bytesToNumber(bytes: Uint8Array): bigint;
    /**
     * Convert a bigint number to bytes
     * @param num
     * @returns
     */
    static numberToBytes(num: bigint): Uint8Array;
    /**
     * Convert U32 number to bytes
     * @param n
     * @returns
     */
    static convertU32ToBytes(n: number): Uint8Array;
    /**
     * Concat multiple byte-arrays into one
     * @param arrays
     * @returns
     */
    static concatBytes(...arrays: Uint8Array[]): Uint8Array;
}
