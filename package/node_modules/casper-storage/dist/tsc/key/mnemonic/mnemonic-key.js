"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MnemonicKey = void 0;
const bip39 = __importStar(require("@scure/bip39"));
const english_1 = require("@scure/bip39/wordlists/english");
const cryptography_1 = require("../../cryptography");
const utils_1 = require("../../utils");
/**
 * Available options
 * https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki
 */
const WORDS_LENGTH_STRENGTH_MAP = new Map([
    [12, 128],
    [15, 160],
    [18, 192],
    [21, 224],
    [24, 256]
]);
/**
 * Let's use the longest available length
 */
const DEFAULT_WORDS_LENGTH = 24;
/**
 * Wrapper to work with mnemonic
 */
class MnemonicKey {
    generate(wordsLength) {
        if (wordsLength == null) {
            wordsLength = DEFAULT_WORDS_LENGTH;
        }
        if (!WORDS_LENGTH_STRENGTH_MAP.has(wordsLength)) {
            throw new Error(`Length of words must be in allowed list: ${Array.from(WORDS_LENGTH_STRENGTH_MAP.keys()).join(", ")}`);
        }
        const byteLength = WORDS_LENGTH_STRENGTH_MAP.get(wordsLength);
        const entropy = cryptography_1.CryptoUtils.randomBytes(byteLength / 8);
        return bip39.entropyToMnemonic(entropy, english_1.wordlist);
    }
    validate(key) {
        return bip39.validateMnemonic(key, this.getWordList());
    }
    toEntropy(key) {
        return bip39.mnemonicToEntropy(key, this.getWordList());
    }
    toEntropyAsync(key) {
        return new Promise((resolve) => {
            resolve(this.toEntropy(key));
        });
    }
    toKey(entropy) {
        const entropyArray = utils_1.TypeUtils.parseHexToArray(entropy);
        const key = bip39.entropyToMnemonic(entropyArray, this.getWordList());
        return key;
    }
    toKeyAsync(entropy) {
        return new Promise((resolve) => {
            resolve(this.toKey(entropy));
        });
    }
    toSeed(key, password) {
        const arr = bip39.mnemonicToSeedSync(key, password);
        return utils_1.TypeUtils.convertArrayToHexString(arr);
    }
    toSeedAsync(key, password) {
        return new Promise((resolve) => {
            resolve(this.toSeed(key, password));
        });
    }
    toSeedArray(key, password) {
        return bip39.mnemonicToSeedSync(key, password);
    }
    toSeedArrayAsync(key, password) {
        return new Promise((resolve) => {
            resolve(this.toSeedArray(key, password));
        });
    }
    /**
     * Returns the default wordlist
     * @returns
     */
    getWordList() {
        return english_1.wordlist;
    }
}
exports.MnemonicKey = MnemonicKey;
